#######################################################################
##
## Zed64 MetroComputer
##
## Unless a module otherwise marked,
## Copyright 2014, Michael T. Mayers (michael@tweakoz.com
## Provided under the Creative Commons Attribution License 3.0
## Please see https://creativecommons.org/licenses/by/3.0/us/legalcode
##
#######################################################################

#!/usr/bin/python

from myhdl import *
import sys, os, md5, string
import localopts

hvcount_bits = 11

################################################33

def SigReset():
    return ResetSignal(0, active=1, async=True)

def SigWord(size=1,def_val=0):
    return Signal(intbv(def_val)[size:])

def SigBool(def_val=False):
    return Signal(intbv(def_val)[1:])

def SigByte(def_val=0):
    return Signal(intbv(def_val)[8:])

def SigAdr16(def_val=0):
    return Signal(intbv(def_val)[16:])

def SigMod64(def_val=0):
    return modbv(def_val)[64:]

def SigMod(w=4,def_val=0):
    return modbv(def_val)[w:]

def pixdimval(value):
    return modbv(value)[hvcount_bits:]

def SigPixCnt(initval=0):
    return Signal(pixdimval(initval))

def Sel2(output,inpa,inpb,sel):
    @always_comb
    def logic():
        if sel:
            output.next = inpb
        else:
            output.next = inpa

    __verilog__ = \
    """assign %(output)s = %(sel)s ? %(inpb)s : %(inpa)s;"""

    output.driven = "wire"

    return logic

def SigColorChannel():
    return Signal(intbv(0)[4:])

class ModeLine:
    def __init__(   self,
                    hlines,hfp,hpulse,hsp,hsi,
                    vlines,vfp,vpulse,vsp,vsi ):
        self.h0 = hlines
        self.h1 = self.h0+hfp
        self.h2 = self.h1+hpulse
        self.hN = self.h2+hsp-4
        self.h3 = self.h2+hsp
        self.hsi = hsi
        self.v0 = vlines
        self.v1 = self.v0+vfp
        self.v2 = self.v1+vpulse
        self.v3 = self.v2+vsp
        self.vsi = vsi

################################################33

def Gen2( x ):
    return x(), x()
def Gen3( x ):
    return x(), x(), x()

################################################33

class UcfLine:
    def __init__(self,txt,newline=True):
        self.txt = txt
        self.newline = newline
    def gen(self):
        str = "%s" % self.txt
        if self.newline:
            str += ";\n"
        return str

class UcfNet:

    def __init__(self,name,loc,std,constraints=None):
        self.name = name
        self.loc = loc
        self.std = std
        self.constraints = constraints
        self.txt = None

    def gen(self):
        str = 'NET "%s" LOC="%s" | IOSTANDARD="%s";\n' % (self.name,self.loc,self.std)
        if self.constraints!=None:
            str += 'NET "%s" %s;\n' % (self.name,self.constraints)
        return str

class UcfGen:

    def __init__(self,ucf_name,def_std="LVCMOS33"):
        self.ucf_name = ucf_name
        self.nets = list()
        self.def_std = def_std
        self.addsep()
        self.addline("# UCF : %s autogenerated with tozedakit\n" % ucf_name, False)
        self.addsep()
    
    def addline(self,txt,newline=True):
        lin = UcfLine(txt,newline)
        self.nets.append(lin)

    def addnet(self,name,loc,std=None,constraints=None):
        if std==None:
            std=self.def_std
        net = UcfNet( name, loc, std, constraints )
        self.nets.append(net)

    def addnetarray(self,basename,locs,std=None):
        loclist = string.split(locs)
        index = 0
        for item in loclist:
            self.addnet( "%s<%d>"%(basename,index) ,item, std )
            index += 1

    def addsep(self):
        self.addline("##############################################\n",False)

    def emit(self,filename):
        fout = open(filename,"wt")
        for item in self.nets:
            fout.write("%s"%item.gen())
        fout.close()

################################################33

def pushdir(newdir):
        olddir = os.getcwd()
        os.chdir(newdir)
        return olddir

def popdir(a):
        os.chdir(a)

################################################33

class verilog_params:
    def __init__(self,outfolder,timescale,ios):
        self.outfolder = outfolder
        self.timescale = timescale
        self.ios = ios

################################################33

timescale = "1ns/1ps"

__all__ = [ 'timescale',
            "verilog_params",
            "SigReset",
            "SigWord",
            "SigMod",
            'SigColorChannel',
            'SigBool',
            'SigMod64',
            'SigPixCnt',
            'SigByte',
            'SigAdr16',
            'Sel2',
            'ModeLine',
            'Gen2',
            'Gen3',
            'UcfGen',
            'pushdir','popdir']
