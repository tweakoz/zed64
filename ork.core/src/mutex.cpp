///////////////////////////////////////////////////////////////////////////////
// MicroOrk (Orkid)
// Copyright 1996-2013, Michael T. Mayers
// Provided under the MIT License (see LICENSE.txt)
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Mutex abstraction (currently recursive only)
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include <ork/mutex.h>
#include <assert.h>

namespace ork {

///////////////////////////////////////////////////////////////////////////////

Mutex::Mutex()
{
	int iret1 = pthread_mutexattr_init( & mMutexAttr );
	int iret2 = pthread_mutexattr_settype( & mMutexAttr, PTHREAD_MUTEX_RECURSIVE );
	//int iret2 = pthread_mutexattr_settype( & mMutexAttr, 0 );
	int iret3 = pthread_mutex_init( & mMutex, & mMutexAttr );
	assert( 0 == iret1 );
	assert( 0 == iret2 );
	assert( 0 == iret3 );
}

///////////////////////////////////////////////////////////////////////////////

Mutex::~Mutex()
{
	int iret1 = pthread_mutex_destroy( & mMutex );
	int iret2 = pthread_mutexattr_destroy( & mMutexAttr );
	assert( 0 == iret1 );
	assert( 0 == iret2 );
}

///////////////////////////////////////////////////////////////////////////////
// Lock the Mutex, If the current thread already has it locked, it will not block,
//  but will increase the lock count (PTHREAD_MUTEX_RECURSIVE)
///////////////////////////////////////////////////////////////////////////////

void Mutex::Lock()
{
	int iret = pthread_mutex_lock( & mMutex );
	mbLocked = true;
	assert( 0 == iret );
}

///////////////////////////////////////////////////////////////////////////////

void Mutex::Unlock()
{
	mbLocked = false;
	int iret = pthread_mutex_unlock( & mMutex );
	assert( 0 == iret );
}

///////////////////////////////////////////////////////////////////////////////
} // namespace ork
